
OS_From_Ground_Up.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019cc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001b64  08001b64  00002b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b7c  08001b7c  00003024  2**0
                  CONTENTS
  4 .ARM          00000008  08001b7c  08001b7c  00002b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b84  08001b84  00003024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b84  08001b84  00002b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b88  08001b88  00002b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08001b8c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003088  20000024  08001bb0  00003024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200030ac  08001bb0  000030ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000863e  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001789  00000000  00000000  0000b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0000ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000761  00000000  00000000  0000d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015405  00000000  00000000  0000df29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac1e  00000000  00000000  0002332e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ef6  00000000  00000000  0002df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5e42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  000b5e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000b8554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001b4c 	.word	0x08001b4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08001b4c 	.word	0x08001b4c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Task_1>:
    .task_2 = 0,
    .task_3 = 0
};

void Task_1(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
    task_variable.task_1 ++;
 80004cc:	4b03      	ldr	r3, [pc, #12]	@ (80004dc <Task_1+0x14>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	4a02      	ldr	r2, [pc, #8]	@ (80004dc <Task_1+0x14>)
 80004d4:	6013      	str	r3, [r2, #0]

    for(;;)
 80004d6:	bf00      	nop
 80004d8:	e7fd      	b.n	80004d6 <Task_1+0xe>
 80004da:	bf00      	nop
 80004dc:	20000040 	.word	0x20000040

080004e0 <Task_2>:

    }
}

void Task_2(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
    task_variable.task_2 ++;
 80004e4:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <Task_2+0x14>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	4a02      	ldr	r2, [pc, #8]	@ (80004f4 <Task_2+0x14>)
 80004ec:	6053      	str	r3, [r2, #4]

    for(;;)
 80004ee:	bf00      	nop
 80004f0:	e7fd      	b.n	80004ee <Task_2+0xe>
 80004f2:	bf00      	nop
 80004f4:	20000040 	.word	0x20000040

080004f8 <Task_3>:

    }
}

void Task_3(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
    task_variable.task_3 ++;
 80004fc:	4b03      	ldr	r3, [pc, #12]	@ (800050c <Task_3+0x14>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	3301      	adds	r3, #1
 8000502:	4a02      	ldr	r2, [pc, #8]	@ (800050c <Task_3+0x14>)
 8000504:	6093      	str	r3, [r2, #8]

    for(;;)
 8000506:	bf00      	nop
 8000508:	e7fd      	b.n	8000506 <Task_3+0xe>
 800050a:	bf00      	nop
 800050c:	20000040 	.word	0x20000040

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 f9a2 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f806 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f862 	bl	80005e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
    Scheduler_Start_OS();
 8000520:	f001 fa50 	bl	80019c4 <Scheduler_Start_OS>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <main+0x14>

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fadc 	bl	8001af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b22      	ldr	r3, [pc, #136]	@ (80005dc <SystemClock_Config+0xb4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a21      	ldr	r2, [pc, #132]	@ (80005dc <SystemClock_Config+0xb4>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <SystemClock_Config+0xb8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fa83 	bl	8000aa4 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a4:	f000 f84a 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fce6 	bl	8000f94 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ce:	f000 f835 	bl	800063c <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	@ 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_GPIO_Init+0x30>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <MX_GPIO_Init+0x30>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_GPIO_Init+0x30>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800062a:	f000 f939 	bl	80008a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010000 	.word	0x40010000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <Error_Handler+0x8>

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <HAL_MspInit+0x4c>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000656:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <HAL_MspInit+0x4c>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065c:	6453      	str	r3, [r2, #68]	@ 0x44
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_MspInit+0x4c>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000672:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <HAL_MspInit+0x4c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	@ 0x40
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	@ 0x30
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <HAL_InitTick+0xd0>)
 80006ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000768 <HAL_InitTick+0xd0>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <HAL_InitTick+0xd0>)
 80006ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c4:	f107 020c 	add.w	r2, r7, #12
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fe2c 	bl	800132c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006d4:	f000 fe16 	bl	8001304 <HAL_RCC_GetPCLK2Freq>
 80006d8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_InitTick+0xd4>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	0c9b      	lsrs	r3, r3, #18
 80006e4:	3b01      	subs	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006e8:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <HAL_InitTick+0xd8>)
 80006ea:	4a22      	ldr	r2, [pc, #136]	@ (8000774 <HAL_InitTick+0xdc>)
 80006ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006ee:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <HAL_InitTick+0xd8>)
 80006f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <HAL_InitTick+0xd8>)
 80006f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <HAL_InitTick+0xd8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <HAL_InitTick+0xd8>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <HAL_InitTick+0xd8>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <HAL_InitTick+0xd8>)
 8000710:	f000 fe3e 	bl	8001390 <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800071a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800071e:	2b00      	cmp	r3, #0
 8000720:	d11b      	bne.n	800075a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000722:	4813      	ldr	r0, [pc, #76]	@ (8000770 <HAL_InitTick+0xd8>)
 8000724:	f000 fe8e 	bl	8001444 <HAL_TIM_Base_Start_IT>
 8000728:	4603      	mov	r3, r0
 800072a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800072e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000732:	2b00      	cmp	r3, #0
 8000734:	d111      	bne.n	800075a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000736:	2019      	movs	r0, #25
 8000738:	f000 f9a6 	bl	8000a88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d808      	bhi.n	8000754 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000742:	2200      	movs	r2, #0
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	2019      	movs	r0, #25
 8000748:	f000 f982 	bl	8000a50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074c:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <HAL_InitTick+0xe0>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e002      	b.n	800075a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800075a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800075e:	4618      	mov	r0, r3
 8000760:	3730      	adds	r7, #48	@ 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	431bde83 	.word	0x431bde83
 8000770:	2000004c 	.word	0x2000004c
 8000774:	40010000 	.word	0x40010000
 8000778:	20000004 	.word	0x20000004

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <MemManage_Handler+0x4>

08000794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80007d6:	f000 fe97 	bl	8001508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000004c 	.word	0x2000004c

080007e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000840 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800080c:	f7ff ffea 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	@ (8000848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	@ (8000854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f001 f965 	bl	8001b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083a:	f7ff fe69 	bl	8000510 <main>
  bx  lr    
 800083e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800084c:	08001b8c 	.word	0x08001b8c
  ldr r2, =_sbss
 8000850:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000854:	200030ac 	.word	0x200030ac

08000858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC_IRQHandler>
	...

0800085c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <HAL_Init+0x40>)
 8000866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800086a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800086c:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_Init+0x40>)
 8000872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	@ (800089c <HAL_Init+0x40>)
 800087e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f8d8 	bl	8000a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	200f      	movs	r0, #15
 800088c:	f7ff ff04 	bl	8000698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff feda 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023c00 	.word	0x40023c00

080008a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_IncTick+0x20>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_IncTick+0x24>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <HAL_IncTick+0x24>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000094 	.word	0x20000094

080008c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <HAL_GetTick+0x14>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000094 	.word	0x20000094

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4907      	ldr	r1, [pc, #28]	@ (800097c <__NVIC_EnableIRQ+0x38>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e100 	.word	0xe000e100

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	@ (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	@ (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	@ 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	@ 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ff4c 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a62:	f7ff ff61 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	68b9      	ldr	r1, [r7, #8]
 8000a6c:	6978      	ldr	r0, [r7, #20]
 8000a6e:	f7ff ffb1 	bl	80009d4 <NVIC_EncodePriority>
 8000a72:	4602      	mov	r2, r0
 8000a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff80 	bl	8000980 <__NVIC_SetPriority>
}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff54 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e267      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d075      	beq.n	8000bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ac2:	4b88      	ldr	r3, [pc, #544]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d00c      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ace:	4b85      	ldr	r3, [pc, #532]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d112      	bne.n	8000b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ada:	4b82      	ldr	r3, [pc, #520]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000ae6:	d10b      	bne.n	8000b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d05b      	beq.n	8000bac <HAL_RCC_OscConfig+0x108>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d157      	bne.n	8000bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e242      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b08:	d106      	bne.n	8000b18 <HAL_RCC_OscConfig+0x74>
 8000b0a:	4b76      	ldr	r3, [pc, #472]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a75      	ldr	r2, [pc, #468]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e01d      	b.n	8000b54 <HAL_RCC_OscConfig+0xb0>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b20:	d10c      	bne.n	8000b3c <HAL_RCC_OscConfig+0x98>
 8000b22:	4b70      	ldr	r3, [pc, #448]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a6f      	ldr	r2, [pc, #444]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a6c      	ldr	r2, [pc, #432]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e00b      	b.n	8000b54 <HAL_RCC_OscConfig+0xb0>
 8000b3c:	4b69      	ldr	r3, [pc, #420]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a68      	ldr	r2, [pc, #416]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b66      	ldr	r3, [pc, #408]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a65      	ldr	r2, [pc, #404]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5c:	f7ff feb4 	bl	80008c8 <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b64:	f7ff feb0 	bl	80008c8 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b64      	cmp	r3, #100	@ 0x64
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e207      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b76:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f0      	beq.n	8000b64 <HAL_RCC_OscConfig+0xc0>
 8000b82:	e014      	b.n	8000bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b84:	f7ff fea0 	bl	80008c8 <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fe9c 	bl	80008c8 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b64      	cmp	r3, #100	@ 0x64
 8000b98:	d901      	bls.n	8000b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e1f3      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b9e:	4b51      	ldr	r3, [pc, #324]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f0      	bne.n	8000b8c <HAL_RCC_OscConfig+0xe8>
 8000baa:	e000      	b.n	8000bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d063      	beq.n	8000c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00b      	beq.n	8000bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bc6:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d11c      	bne.n	8000c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bd2:	4b44      	ldr	r3, [pc, #272]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d116      	bne.n	8000c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bde:	4b41      	ldr	r3, [pc, #260]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x152>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d001      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e1c7      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4937      	ldr	r1, [pc, #220]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0a:	e03a      	b.n	8000c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d020      	beq.n	8000c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c14:	4b34      	ldr	r3, [pc, #208]	@ (8000ce8 <HAL_RCC_OscConfig+0x244>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fe55 	bl	80008c8 <HAL_GetTick>
 8000c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c22:	f7ff fe51 	bl	80008c8 <HAL_GetTick>
 8000c26:	4602      	mov	r2, r0
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e1a8      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f0      	beq.n	8000c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c40:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4925      	ldr	r1, [pc, #148]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
 8000c54:	e015      	b.n	8000c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <HAL_RCC_OscConfig+0x244>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fe34 	bl	80008c8 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fe30 	bl	80008c8 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e187      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d036      	beq.n	8000cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d016      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_RCC_OscConfig+0x248>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c9c:	f7ff fe14 	bl	80008c8 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fe10 	bl	80008c8 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e167      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_RCC_OscConfig+0x240>)
 8000cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x200>
 8000cc2:	e01b      	b.n	8000cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_RCC_OscConfig+0x248>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cca:	f7ff fdfd 	bl	80008c8 <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd0:	e00e      	b.n	8000cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fdf9 	bl	80008c8 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d907      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e150      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	42470000 	.word	0x42470000
 8000cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf0:	4b88      	ldr	r3, [pc, #544]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1ea      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8097 	beq.w	8000e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d0e:	4b81      	ldr	r3, [pc, #516]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10f      	bne.n	8000d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a7c      	ldr	r2, [pc, #496]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d36:	2301      	movs	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d3a:	4b77      	ldr	r3, [pc, #476]	@ (8000f18 <HAL_RCC_OscConfig+0x474>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d118      	bne.n	8000d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d46:	4b74      	ldr	r3, [pc, #464]	@ (8000f18 <HAL_RCC_OscConfig+0x474>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a73      	ldr	r2, [pc, #460]	@ (8000f18 <HAL_RCC_OscConfig+0x474>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d52:	f7ff fdb9 	bl	80008c8 <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d5a:	f7ff fdb5 	bl	80008c8 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e10c      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8000f18 <HAL_RCC_OscConfig+0x474>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d106      	bne.n	8000d8e <HAL_RCC_OscConfig+0x2ea>
 8000d80:	4b64      	ldr	r3, [pc, #400]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d84:	4a63      	ldr	r2, [pc, #396]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d8c:	e01c      	b.n	8000dc8 <HAL_RCC_OscConfig+0x324>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x30c>
 8000d96:	4b5f      	ldr	r3, [pc, #380]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d9a:	4a5e      	ldr	r2, [pc, #376]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8000da2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000da6:	4a5b      	ldr	r2, [pc, #364]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8000dae:	e00b      	b.n	8000dc8 <HAL_RCC_OscConfig+0x324>
 8000db0:	4b58      	ldr	r3, [pc, #352]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000db4:	4a57      	ldr	r2, [pc, #348]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8000dbc:	4b55      	ldr	r3, [pc, #340]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dc0:	4a54      	ldr	r2, [pc, #336]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000dc2:	f023 0304 	bic.w	r3, r3, #4
 8000dc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fd7a 	bl	80008c8 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd6:	e00a      	b.n	8000dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fd76 	bl	80008c8 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e0cb      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dee:	4b49      	ldr	r3, [pc, #292]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0ee      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x334>
 8000dfa:	e014      	b.n	8000e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fd64 	bl	80008c8 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e02:	e00a      	b.n	8000e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e04:	f7ff fd60 	bl	80008c8 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e0b5      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1ee      	bne.n	8000e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d105      	bne.n	8000e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2c:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	4a38      	ldr	r2, [pc, #224]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 80a1 	beq.w	8000f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e42:	4b34      	ldr	r3, [pc, #208]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d05c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d141      	bne.n	8000eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e56:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <HAL_RCC_OscConfig+0x478>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fd34 	bl	80008c8 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e64:	f7ff fd30 	bl	80008c8 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e087      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e76:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69da      	ldr	r2, [r3, #28]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e98:	085b      	lsrs	r3, r3, #1
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	041b      	lsls	r3, r3, #16
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea4:	061b      	lsls	r3, r3, #24
 8000ea6:	491b      	ldr	r1, [pc, #108]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <HAL_RCC_OscConfig+0x478>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fd09 	bl	80008c8 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eba:	f7ff fd05 	bl	80008c8 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e05c      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x416>
 8000ed8:	e054      	b.n	8000f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_RCC_OscConfig+0x478>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fcf2 	bl	80008c8 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee8:	f7ff fcee 	bl	80008c8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e045      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_RCC_OscConfig+0x470>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x444>
 8000f06:	e03d      	b.n	8000f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d107      	bne.n	8000f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e038      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000
 8000f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_RCC_OscConfig+0x4ec>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d028      	beq.n	8000f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d121      	bne.n	8000f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d11a      	bne.n	8000f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000f50:	4013      	ands	r3, r2
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d111      	bne.n	8000f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d107      	bne.n	8000f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d001      	beq.n	8000f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e0cc      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa8:	4b68      	ldr	r3, [pc, #416]	@ (800114c <HAL_RCC_ClockConfig+0x1b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d90c      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb6:	4b65      	ldr	r3, [pc, #404]	@ (800114c <HAL_RCC_ClockConfig+0x1b8>)
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fbe:	4b63      	ldr	r3, [pc, #396]	@ (800114c <HAL_RCC_ClockConfig+0x1b8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d001      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0b8      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d020      	beq.n	800101e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe8:	4b59      	ldr	r3, [pc, #356]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a58      	ldr	r2, [pc, #352]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001000:	4b53      	ldr	r3, [pc, #332]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a52      	ldr	r2, [pc, #328]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001006:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800100a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800100c:	4b50      	ldr	r3, [pc, #320]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	494d      	ldr	r1, [pc, #308]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	4313      	orrs	r3, r2
 800101c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d044      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d107      	bne.n	8001042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b47      	ldr	r3, [pc, #284]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d119      	bne.n	8001072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e07f      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d003      	beq.n	8001052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800104e:	2b03      	cmp	r3, #3
 8001050:	d107      	bne.n	8001062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001052:	4b3f      	ldr	r3, [pc, #252]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e06f      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001062:	4b3b      	ldr	r3, [pc, #236]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e067      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001072:	4b37      	ldr	r3, [pc, #220]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f023 0203 	bic.w	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4934      	ldr	r1, [pc, #208]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001084:	f7ff fc20 	bl	80008c8 <HAL_GetTick>
 8001088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108c:	f7ff fc1c 	bl	80008c8 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800109a:	4293      	cmp	r3, r2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e04f      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 020c 	and.w	r2, r3, #12
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d1eb      	bne.n	800108c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_RCC_ClockConfig+0x1b8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d20c      	bcs.n	80010dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <HAL_RCC_ClockConfig+0x1b8>)
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_RCC_ClockConfig+0x1b8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e032      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4916      	ldr	r1, [pc, #88]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d009      	beq.n	800111a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	490e      	ldr	r1, [pc, #56]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800111a:	f000 f821 	bl	8001160 <HAL_RCC_GetSysClockFreq>
 800111e:	4602      	mov	r2, r0
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	490a      	ldr	r1, [pc, #40]	@ (8001154 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	5ccb      	ldrb	r3, [r1, r3]
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	4a09      	ldr	r2, [pc, #36]	@ (8001158 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_RCC_ClockConfig+0x1c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff faac 	bl	8000698 <HAL_InitTick>

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023c00 	.word	0x40023c00
 8001150:	40023800 	.word	0x40023800
 8001154:	08001b64 	.word	0x08001b64
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001164:	b090      	sub	sp, #64	@ 0x40
 8001166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
 800116c:	2300      	movs	r3, #0
 800116e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001178:	4b59      	ldr	r3, [pc, #356]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d00d      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001184:	2b08      	cmp	r3, #8
 8001186:	f200 80a1 	bhi.w	80012cc <HAL_RCC_GetSysClockFreq+0x16c>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <HAL_RCC_GetSysClockFreq+0x34>
 800118e:	2b04      	cmp	r3, #4
 8001190:	d003      	beq.n	800119a <HAL_RCC_GetSysClockFreq+0x3a>
 8001192:	e09b      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001194:	4b53      	ldr	r3, [pc, #332]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001198:	e09b      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800119a:	4b53      	ldr	r3, [pc, #332]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800119c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800119e:	e098      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a0:	4b4f      	ldr	r3, [pc, #316]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011aa:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d028      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011b6:	4b4a      	ldr	r3, [pc, #296]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	099b      	lsrs	r3, r3, #6
 80011bc:	2200      	movs	r2, #0
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80011c8:	2100      	movs	r1, #0
 80011ca:	4b47      	ldr	r3, [pc, #284]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80011cc:	fb03 f201 	mul.w	r2, r3, r1
 80011d0:	2300      	movs	r3, #0
 80011d2:	fb00 f303 	mul.w	r3, r0, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	4a43      	ldr	r2, [pc, #268]	@ (80012e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80011da:	fba0 1202 	umull	r1, r2, r0, r2
 80011de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80011e0:	460a      	mov	r2, r1
 80011e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80011e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e6:	4413      	add	r3, r2
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ec:	2200      	movs	r2, #0
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	61fa      	str	r2, [r7, #28]
 80011f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011fa:	f7fe ffed 	bl	80001d8 <__aeabi_uldivmod>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4613      	mov	r3, r2
 8001204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001206:	e053      	b.n	80012b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001208:	4b35      	ldr	r3, [pc, #212]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	2200      	movs	r2, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	617a      	str	r2, [r7, #20]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800121a:	f04f 0b00 	mov.w	fp, #0
 800121e:	4652      	mov	r2, sl
 8001220:	465b      	mov	r3, fp
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	0159      	lsls	r1, r3, #5
 800122c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001230:	0150      	lsls	r0, r2, #5
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ebb2 080a 	subs.w	r8, r2, sl
 800123a:	eb63 090b 	sbc.w	r9, r3, fp
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800124a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800124e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001252:	ebb2 0408 	subs.w	r4, r2, r8
 8001256:	eb63 0509 	sbc.w	r5, r3, r9
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	00eb      	lsls	r3, r5, #3
 8001264:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001268:	00e2      	lsls	r2, r4, #3
 800126a:	4614      	mov	r4, r2
 800126c:	461d      	mov	r5, r3
 800126e:	eb14 030a 	adds.w	r3, r4, sl
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	eb45 030b 	adc.w	r3, r5, fp
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001286:	4629      	mov	r1, r5
 8001288:	028b      	lsls	r3, r1, #10
 800128a:	4621      	mov	r1, r4
 800128c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001290:	4621      	mov	r1, r4
 8001292:	028a      	lsls	r2, r1, #10
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800129a:	2200      	movs	r2, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	60fa      	str	r2, [r7, #12]
 80012a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a4:	f7fe ff98 	bl	80001d8 <__aeabi_uldivmod>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4613      	mov	r3, r2
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	3301      	adds	r3, #1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80012c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012ca:	e002      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3740      	adds	r7, #64	@ 0x40
 80012d8:	46bd      	mov	sp, r7
 80012da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	00f42400 	.word	0x00f42400
 80012e8:	017d7840 	.word	0x017d7840

080012ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_RCC_GetHCLKFreq+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000

08001304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001308:	f7ff fff0 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0b5b      	lsrs	r3, r3, #13
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4903      	ldr	r1, [pc, #12]	@ (8001328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	08001b74 	.word	0x08001b74

0800132c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	220f      	movs	r2, #15
 800133a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_RCC_GetClockConfig+0x60>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0207 	and.w	r2, r3, #7
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e041      	b.n	8001426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f839 	bl	800142e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3304      	adds	r3, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f000 f9b2 	bl	8001738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e044      	b.n	80014e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1e      	ldr	r2, [pc, #120]	@ (80014f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d018      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x6c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001486:	d013      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x6c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1a      	ldr	r2, [pc, #104]	@ (80014f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00e      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x6c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a19      	ldr	r2, [pc, #100]	@ (80014fc <HAL_TIM_Base_Start_IT+0xb8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d009      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x6c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <HAL_TIM_Base_Start_IT+0xbc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d004      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x6c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a16      	ldr	r2, [pc, #88]	@ (8001504 <HAL_TIM_Base_Start_IT+0xc0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d111      	bne.n	80014d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d010      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014d2:	e007      	b.n	80014e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40010000 	.word	0x40010000
 80014f8:	40000400 	.word	0x40000400
 80014fc:	40000800 	.word	0x40000800
 8001500:	40000c00 	.word	0x40000c00
 8001504:	40014000 	.word	0x40014000

08001508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d020      	beq.n	800156c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01b      	beq.n	800156c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f06f 0202 	mvn.w	r2, #2
 800153c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f8d2 	bl	80016fc <HAL_TIM_IC_CaptureCallback>
 8001558:	e005      	b.n	8001566 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f8c4 	bl	80016e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f8d5 	bl	8001710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d020      	beq.n	80015b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01b      	beq.n	80015b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f06f 0204 	mvn.w	r2, #4
 8001588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2202      	movs	r2, #2
 800158e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8ac 	bl	80016fc <HAL_TIM_IC_CaptureCallback>
 80015a4:	e005      	b.n	80015b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f89e 	bl	80016e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f8af 	bl	8001710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d020      	beq.n	8001604 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01b      	beq.n	8001604 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0208 	mvn.w	r2, #8
 80015d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2204      	movs	r2, #4
 80015da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f886 	bl	80016fc <HAL_TIM_IC_CaptureCallback>
 80015f0:	e005      	b.n	80015fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f878 	bl	80016e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f889 	bl	8001710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d020      	beq.n	8001650 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01b      	beq.n	8001650 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f06f 0210 	mvn.w	r2, #16
 8001620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2208      	movs	r2, #8
 8001626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f860 	bl	80016fc <HAL_TIM_IC_CaptureCallback>
 800163c:	e005      	b.n	800164a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f852 	bl	80016e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f863 	bl	8001710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f06f 0201 	mvn.w	r2, #1
 800166c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7fe ffd2 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00c      	beq.n	8001698 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f8e6 	bl	8001864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00c      	beq.n	80016bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80016b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f834 	bl	8001724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00c      	beq.n	80016e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0220 	mvn.w	r2, #32
 80016d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8b8 	bl	8001850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3a      	ldr	r2, [pc, #232]	@ (8001834 <TIM_Base_SetConfig+0xfc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00f      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001756:	d00b      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a37      	ldr	r2, [pc, #220]	@ (8001838 <TIM_Base_SetConfig+0x100>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a36      	ldr	r2, [pc, #216]	@ (800183c <TIM_Base_SetConfig+0x104>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d003      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a35      	ldr	r2, [pc, #212]	@ (8001840 <TIM_Base_SetConfig+0x108>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d108      	bne.n	8001782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <TIM_Base_SetConfig+0xfc>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01b      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001790:	d017      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a28      	ldr	r2, [pc, #160]	@ (8001838 <TIM_Base_SetConfig+0x100>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a27      	ldr	r2, [pc, #156]	@ (800183c <TIM_Base_SetConfig+0x104>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00f      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a26      	ldr	r2, [pc, #152]	@ (8001840 <TIM_Base_SetConfig+0x108>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00b      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a25      	ldr	r2, [pc, #148]	@ (8001844 <TIM_Base_SetConfig+0x10c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a24      	ldr	r2, [pc, #144]	@ (8001848 <TIM_Base_SetConfig+0x110>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d003      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a23      	ldr	r2, [pc, #140]	@ (800184c <TIM_Base_SetConfig+0x114>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d108      	bne.n	80017d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001834 <TIM_Base_SetConfig+0xfc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d103      	bne.n	8001808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b01      	cmp	r3, #1
 8001818:	d105      	bne.n	8001826 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f023 0201 	bic.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]
  }
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40010000 	.word	0x40010000
 8001838:	40000400 	.word	0x40000400
 800183c:	40000800 	.word	0x40000800
 8001840:	40000c00 	.word	0x40000c00
 8001844:	40014000 	.word	0x40014000
 8001848:	40014400 	.word	0x40014400
 800184c:	40014800 	.word	0x40014800

08001850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <Scheduler_Init_Task>:

volatile uint32_t Systick_Counter = 0;

 
static void Scheduler_Init_Task(void * Task_Function_Ptr, uint32_t * Task_Stack_Ptr, uint32_t Task_Stack_Index)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]

    /* Store XPSR */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x01000000u;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800188a:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3b04      	subs	r3, #4
 8001890:	60bb      	str	r3, [r7, #8]

    /* Store PC */
    *(volatile uint32_t *)Task_Stack_Ptr = (uint32_t)Task_Function_Ptr;
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	3b04      	subs	r3, #4
 800189c:	60bb      	str	r3, [r7, #8]

    /* Store LR */
    *(volatile uint32_t *)Task_Stack_Ptr = 0xFFFFFFFDu;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f06f 0202 	mvn.w	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3b04      	subs	r3, #4
 80018aa:	60bb      	str	r3, [r7, #8]

    /* Store R12 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x12121212u;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80018b2:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3b04      	subs	r3, #4
 80018b8:	60bb      	str	r3, [r7, #8]

    /* Store R3 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x03030303u;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80018c0:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3b04      	subs	r3, #4
 80018c6:	60bb      	str	r3, [r7, #8]

    /* Store R2 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x02020202u;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80018ce:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	3b04      	subs	r3, #4
 80018d4:	60bb      	str	r3, [r7, #8]

    /* Store R1 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x01010101u;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80018dc:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b04      	subs	r3, #4
 80018e2:	60bb      	str	r3, [r7, #8]

    /* Store R0 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x00000000u;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3b04      	subs	r3, #4
 80018ee:	60bb      	str	r3, [r7, #8]

    /* Store R11 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x11111111u;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 80018f6:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3b04      	subs	r3, #4
 80018fc:	60bb      	str	r3, [r7, #8]

    /* Store R10 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x10101010u;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8001904:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3b04      	subs	r3, #4
 800190a:	60bb      	str	r3, [r7, #8]

    /* Store R9 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x09090909u;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8001912:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	3b04      	subs	r3, #4
 8001918:	60bb      	str	r3, [r7, #8]

    /* Store R8 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x08080808u;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8001920:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3b04      	subs	r3, #4
 8001926:	60bb      	str	r3, [r7, #8]

    /* Store R7 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x07070707u;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800192e:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3b04      	subs	r3, #4
 8001934:	60bb      	str	r3, [r7, #8]

    /* Store R6 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x06060606u;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800193c:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3b04      	subs	r3, #4
 8001942:	60bb      	str	r3, [r7, #8]

    /* Store R5 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x05050505u;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800194a:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3b04      	subs	r3, #4
 8001950:	60bb      	str	r3, [r7, #8]

    /* Store R4 */
    *(volatile uint32_t *)Task_Stack_Ptr = 0x04040404u;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8001958:	601a      	str	r2, [r3, #0]
    Task_Stack_Ptr --;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3b04      	subs	r3, #4
 800195e:	60bb      	str	r3, [r7, #8]

    Task_Stack_Ptr_Table[Task_Stack_Index] = (uint32_t)Task_Stack_Ptr;
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	4905      	ldr	r1, [pc, #20]	@ (8001978 <Scheduler_Init_Task+0x100>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000098 	.word	0x20000098

0800197c <Scheduler_Get_Current_PSP>:

static uint32_t Scheduler_Get_Current_PSP(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
    return Task_Stack_Ptr_Table[Task_Stack_Index];
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <Scheduler_Get_Current_PSP+0x18>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <Scheduler_Get_Current_PSP+0x1c>)
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	200000a4 	.word	0x200000a4
 8001998:	20000098 	.word	0x20000098

0800199c <Scheduler_Save_Current_PSP>:

static void Scheduler_Save_Current_PSP(uint32_t Current_PSP)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    Task_Stack_Ptr_Table[Task_Stack_Index] = Current_PSP;
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <Scheduler_Save_Current_PSP+0x20>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4905      	ldr	r1, [pc, #20]	@ (80019c0 <Scheduler_Save_Current_PSP+0x24>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	200000a4 	.word	0x200000a4
 80019c0:	20000098 	.word	0x20000098

080019c4 <Scheduler_Start_OS>:

void Scheduler_Start_OS(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
    /* Init OS task */
    Scheduler_Init_Task(My_OS_Task[0], Task_1_Stack_Ptr, 0);
 80019c8:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <Scheduler_Start_OS+0x60>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a16      	ldr	r2, [pc, #88]	@ (8001a28 <Scheduler_Start_OS+0x64>)
 80019ce:	6811      	ldr	r1, [r2, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff50 	bl	8001878 <Scheduler_Init_Task>
    Scheduler_Init_Task(My_OS_Task[1], Task_2_Stack_Ptr, 1);
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <Scheduler_Start_OS+0x60>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <Scheduler_Start_OS+0x68>)
 80019de:	6811      	ldr	r1, [r2, #0]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff48 	bl	8001878 <Scheduler_Init_Task>
    Scheduler_Init_Task(My_OS_Task[2], Task_3_Stack_Ptr, 2);
 80019e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <Scheduler_Start_OS+0x60>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <Scheduler_Start_OS+0x6c>)
 80019ee:	6811      	ldr	r1, [r2, #0]
 80019f0:	2202      	movs	r2, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff40 	bl	8001878 <Scheduler_Init_Task>
    /* Init and start system timer */
    System_Timer_Init();
 80019f8:	f000 f84c 	bl	8001a94 <System_Timer_Init>
    System_Timer_Start();
 80019fc:	f000 f86a 	bl	8001ad4 <System_Timer_Start>

    /* Set PSP */
    __asm volatile("bl Scheduler_Get_Current_PSP");
 8001a00:	f7ff ffbc 	bl	800197c <Scheduler_Get_Current_PSP>
    __asm volatile("MSR PSP, R0");
 8001a04:	f380 8809 	msr	PSP, r0

    /* Use PSP */
    __asm volatile("MRS R0, CONTROL");
 8001a08:	f3ef 8014 	mrs	r0, CONTROL
    __asm volatile("ORR R0, R0, #2"); // set bit[1] SPSEL
 8001a0c:	f040 0002 	orr.w	r0, r0, #2
    __asm volatile("MSR CONTROL, R0");
 8001a10:	f380 8814 	msr	CONTROL, r0

    /* Call first task */
    ((void (*)())(((uint32_t *)(Task_Stack_Ptr_Table[0]))[PC_INDEX]))();
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <Scheduler_Start_OS+0x70>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	333c      	adds	r3, #60	@ 0x3c
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4798      	blx	r3

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000018 	.word	0x20000018
 8001a28:	2000000c 	.word	0x2000000c
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	20000014 	.word	0x20000014
 8001a34:	20000098 	.word	0x20000098

08001a38 <SysTick_Handler>:

__attribute__ ((naked)) void SysTick_Handler(void)
{
    __asm volatile("PUSH {LR}");
 8001a38:	b500      	push	{lr}

    Systick_Counter ++;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <SysTick_Handler+0x50>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <SysTick_Handler+0x50>)
 8001a42:	6013      	str	r3, [r2, #0]

    /* Save PSP */
    __asm volatile("MRS R0, PSP");
 8001a44:	f3ef 8009 	mrs	r0, PSP
    __asm volatile("STMDB R0!, {R4-R11}");
 8001a48:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    /* Store PSP because R0 is input param */
    __asm volatile("bl Scheduler_Save_Current_PSP");
 8001a4c:	f7ff ffa6 	bl	800199c <Scheduler_Save_Current_PSP>

    Task_Stack_Index ++;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <SysTick_Handler+0x54>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <SysTick_Handler+0x54>)
 8001a58:	6013      	str	r3, [r2, #0]
    Task_Stack_Index = Task_Stack_Index % MAX_OS_TASK;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <SysTick_Handler+0x54>)
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <SysTick_Handler+0x58>)
 8001a60:	fba3 2301 	umull	r2, r3, r3, r1
 8001a64:	085a      	lsrs	r2, r3, #1
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	1aca      	subs	r2, r1, r3
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <SysTick_Handler+0x54>)
 8001a70:	601a      	str	r2, [r3, #0]

    __asm volatile("bl Scheduler_Get_Current_PSP");
 8001a72:	f7ff ff83 	bl	800197c <Scheduler_Get_Current_PSP>
    __asm volatile("LDMIA R0!, {R4-R11}");
 8001a76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    __asm volatile("MSR PSP, R0");
 8001a7a:	f380 8809 	msr	PSP, r0

    __asm volatile("POP {LR}");
 8001a7e:	f85d eb04 	ldr.w	lr, [sp], #4
    __asm volatile("BX LR");
 8001a82:	4770      	bx	lr
    
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	200000a8 	.word	0x200000a8
 8001a8c:	200000a4 	.word	0x200000a4
 8001a90:	aaaaaaab 	.word	0xaaaaaaab

08001a94 <System_Timer_Init>:
#include <stdint.h>
#include "stm32f4xx.h"


void System_Timer_Init(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
    /* Clear current value */
    SysTick->VAL = 0;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <System_Timer_Init+0x3c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]

    /* Program reload value */
    SysTick->LOAD |= 0xF42400;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <System_Timer_Init+0x3c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <System_Timer_Init+0x3c>)
 8001aa4:	f443 0374 	orr.w	r3, r3, #15990784	@ 0xf40000
 8001aa8:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8001aac:	6053      	str	r3, [r2, #4]

    /* Use prosessor clock */
    SysTick->CTRL |= (1 << SysTick_CTRL_CLKSOURCE_Pos);
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <System_Timer_Init+0x3c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <System_Timer_Init+0x3c>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6013      	str	r3, [r2, #0]

    /* Enable systick exception */
    SysTick->CTRL |= (1 << SysTick_CTRL_TICKINT_Pos);
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <System_Timer_Init+0x3c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <System_Timer_Init+0x3c>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6013      	str	r3, [r2, #0]

}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <System_Timer_Start>:

void System_Timer_Start(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
    /* Enable system timer */
    SysTick->CTRL |= (1 << SysTick_CTRL_ENABLE_Pos);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <System_Timer_Start+0x1c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <System_Timer_Start+0x1c>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <memset>:
 8001af4:	4402      	add	r2, r0
 8001af6:	4603      	mov	r3, r0
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d100      	bne.n	8001afe <memset+0xa>
 8001afc:	4770      	bx	lr
 8001afe:	f803 1b01 	strb.w	r1, [r3], #1
 8001b02:	e7f9      	b.n	8001af8 <memset+0x4>

08001b04 <__libc_init_array>:
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	4d0d      	ldr	r5, [pc, #52]	@ (8001b3c <__libc_init_array+0x38>)
 8001b08:	4c0d      	ldr	r4, [pc, #52]	@ (8001b40 <__libc_init_array+0x3c>)
 8001b0a:	1b64      	subs	r4, r4, r5
 8001b0c:	10a4      	asrs	r4, r4, #2
 8001b0e:	2600      	movs	r6, #0
 8001b10:	42a6      	cmp	r6, r4
 8001b12:	d109      	bne.n	8001b28 <__libc_init_array+0x24>
 8001b14:	4d0b      	ldr	r5, [pc, #44]	@ (8001b44 <__libc_init_array+0x40>)
 8001b16:	4c0c      	ldr	r4, [pc, #48]	@ (8001b48 <__libc_init_array+0x44>)
 8001b18:	f000 f818 	bl	8001b4c <_init>
 8001b1c:	1b64      	subs	r4, r4, r5
 8001b1e:	10a4      	asrs	r4, r4, #2
 8001b20:	2600      	movs	r6, #0
 8001b22:	42a6      	cmp	r6, r4
 8001b24:	d105      	bne.n	8001b32 <__libc_init_array+0x2e>
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b2c:	4798      	blx	r3
 8001b2e:	3601      	adds	r6, #1
 8001b30:	e7ee      	b.n	8001b10 <__libc_init_array+0xc>
 8001b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b36:	4798      	blx	r3
 8001b38:	3601      	adds	r6, #1
 8001b3a:	e7f2      	b.n	8001b22 <__libc_init_array+0x1e>
 8001b3c:	08001b84 	.word	0x08001b84
 8001b40:	08001b84 	.word	0x08001b84
 8001b44:	08001b84 	.word	0x08001b84
 8001b48:	08001b88 	.word	0x08001b88

08001b4c <_init>:
 8001b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4e:	bf00      	nop
 8001b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b52:	bc08      	pop	{r3}
 8001b54:	469e      	mov	lr, r3
 8001b56:	4770      	bx	lr

08001b58 <_fini>:
 8001b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5a:	bf00      	nop
 8001b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b5e:	bc08      	pop	{r3}
 8001b60:	469e      	mov	lr, r3
 8001b62:	4770      	bx	lr
